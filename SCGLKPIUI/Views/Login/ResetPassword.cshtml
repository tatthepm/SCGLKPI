@model BOL.TUser
@{
    ViewBag.Title = "Login";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var currentDate = DateTime.Now;
}

@*//*@
<div class="content animate-panel">
    <div class="row">
        <div class="col-lg-12 text-center m-t-md">
            <h2>Reset Password for users</h2>
        </div>
    </div>
    <div class="row">
        <!-- main start -->
        <!-- ================ -->
        <!-- main end -->
        <div class="main col-md-8 col-md-offset-2">
            <div class="object-non-visible" data-animation-effect="fadeInDownSmall" data-effect-delay="300">
                <div class="form-block center-block">

                    <hr>
                    @if (TempData["Msg"] != null) { <div class="alert alert-dismissable alert-danger">
                        <button type="button" class="close" data-dismiss="alert">×</button>
                        <span style="font-size:small"> @TempData["Msg"].ToString()</span>
                    </div>
                    }
                    @using (Html.BeginForm("ResetPassword", "Login", FormMethod.Post, new { @class = "login-form",@id="login_form" })) {
                        @Html.AntiForgeryToken()
                        <div class="form-horizontal">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="form-group has-feedback">
                                @Html.Label("User e-mail to reset", htmlAttributes: new { @class = "control-label col-md-3", @style = "font-size:medium" })
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.UserEmail, new { htmlAttributes = new { @class = "form-control" } })
                                    <i class="fa fa-user form-control-feedback"></i>
                                    @Html.ValidationMessageFor(model => model.UserEmail, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.Label("New password", null, htmlAttributes: new { @class = "control-label col-md-3", @style = "font-size:medium" })
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control ", @placeholder = "New password", @Value = "" } })
                                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger", @style = "font-size:smaller" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.Label("Confirm new password", null, htmlAttributes: new { @class = "control-label col-md-3", @style = "font-size:medium" })
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control", @placeholder = "Confirm new password", @Value = "" } })
                                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger", @style = "font-size:smaller" })
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-4"></div>
                                <div class="col-md-3" style="text-align:center">
                                    <button class="btn btn-primary" type="submit">RESET</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/validation/js")
    @Scripts.Render("~/bundles/flot/js")
    <script type="text/javascript">
        $(function () {
            $("#login_form").validate({
                rules: {
                    password: {
                        required: true,
                        minlength: 3
                    },
                    url: {
                        required: true,
                        url: true
                    },
                    number: {
                        required: true,
                        number: true
                    },
                    max: {
                        required: true,
                        maxlength: 4
                    }
                },
                submitHandler: function (form) {
                    form.submit();
                }
            });
            //
        });
    </script>
}









