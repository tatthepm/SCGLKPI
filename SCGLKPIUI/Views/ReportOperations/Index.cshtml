@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style type="text/css">
    .chart-legend li span {
        display: inline-block;
        width: 12px;
        height: 12px;
        margin-right: 5px;
        list-style: none;
    }

    .chart-legend ul {
        list-style-type: none;
    }

    /* Green check. */
    .glyphicon-ok {
        color: green;
    }
    /* Red X. */
    .glyphicon-remove {
        color: red;
    }
</style>

<h4>
    <i class="fa fa-bar-chart"></i> KPI Reports by customers and segments
</h4>
@*filter by date*@
@Html.Partial("pv_FilterReportOperations")
@Html.Partial("pv_ReportOperationsTable")
@Html.Partial("pv_ReportOperationsChart")

<div>
    <div id="loading" class="modal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Loading...</h4>
                </div>
                <div class="modal-body">
                    @*<div class="progress progress-success">
                            <div class="progress-bar" style="width:100%"></div>
                        </div>*@
                    <div class="progress m-t-xs full progress-small">
                        <div style="width:100%" aria-valuemax="100" aria-valuemin="0" aria-valuenow="100" role="progressbar" class="progress-bar progress-bar-striped active">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    @Styles.Render("~/bundles/datatables/css")
    @Styles.Render("~/bundles/xeditable/css")
    @Styles.Render("~/bundles/select2/css")
    @Styles.Render("~/bundles/touchspin/css")
    @Styles.Render("~/bundles/datepicker/css")
    @Styles.Render("~/bundles/bootstrapCheckbox/css")
    @Styles.Render("~/bundles/datetimepicker/css")
    @Styles.Render("~/bundles/clockpicker/css")
    @Styles.Render("~/bundles/sweetAlert/css")
    @Styles.Render("~/bundles/toastr/css")
    @Styles.Render("~/bundles/ladda/css")
    <link href="~/Content/jquery.datetimepicker.css" rel="stylesheet" />
}

@section Scripts {
    @Scripts.Render("~/bundles/moment/js")
    @Scripts.Render("~/bundles/xeditable/js")
    @Scripts.Render("~/bundles/select2/js")
    @Scripts.Render("~/bundles/touchspin/js")
    @Scripts.Render("~/bundles/clockpicker/js")
    @Scripts.Render("~/bundles/chartjs/js")
    @Scripts.Render("~/bundles/datatables/js")
    @Scripts.Render("~/bundles/datatablesBootstrap/js")
    @Scripts.Render("~/bundles/datatablesPlugins/js")
    @Scripts.Render("~/bundles/sweetAlert/js")
    @Scripts.Render("~/bundles/toastr/js")
    @Scripts.Render("~/bundles/ladda/js")
    @*<script src="~/Scripts/Vk1-0.1.0.js"></script>*@
    <script src="~/Scripts/jquery.datetimepicker.js"></script>
    <script type="text/javascript">

        //created global object Then just before initializing the chart i destroyed
        var chartOntime;
        var chartOntimeDocrtn;
        var chartOntimeInbound;
        var chartOntimeOutbound;
        var chartOntimeAccept;
        var chartOntimeTender;
        var chartShipment;
        var pieChartOntime;
        //var ReportOperations = $('#ReportOperationsSummary').dataTable();
        //
        // show progress
        $(document).ajaxStart(function () {
            $("#loading").show();
        });

        $(document).ajaxStop(function () {
            $("#loading").hide();
        });
        //

        //#region 1 autocomplete dropdownlist
        $(".js-source-states").select2();
        //#endregion

        //#region 2 date time picker
        jQuery('#FromDateSearch').datetimepicker({
            format: 'Y/m/d',
            onShow: function (ct) {
                this.setOptions({
                    maxDate: jQuery('#ToDateSearch').val() ? jQuery('#ToDateSearch').val() : false
                })
            },
            timepicker: false
        });
        jQuery('#ToDateSearch').datetimepicker({
            format: 'Y/m/d',
            onShow: function (ct) {
                this.setOptions({
                    minDate: jQuery('#FromDateSearch').val() ? jQuery('#FromDateSearch').val() : false
                })
            },
            timepicker: false
        });
        //#endregion

        //#region 4 getJson Section
        $("#DepartmentId").change(function (res) {
            departmentId = $("#DepartmentId").val();
            $.getJSON('/ReportOperations/SectionFilter?departmentId=' + departmentId, function (data) {
                var ddl = $("#SectionId");
                // ddl.removeAttrs('disabled style');
                ddl.addClass('js-source-states');
                var string = '<option value="">ALL</option>';
                $.each(data, function (i, S) {
                    string += '<option value="' + S.Id + '">' + S.Name + '</option>'
                });
                ddl.html(string);
                ddl.select2('val', '');
            });
        });

        //#endregion

        //#region 5 getJson MatName
        $("#SectionId").change(function (res) {
            if ($('#SectionId').val() == "") {
                swal({
                    title: "Warning!",
                    text: "Sorry!, Section is not selected ",
                    type: "warning"
                });
            } else {
                departmentId = $("#DepartmentId").val();
                sectionId = $("#SectionId").val();
                $.getJSON('/ReportOperations/MatNameFilter?departmentId=' + departmentId + '&sectionid=' + sectionId, function (data) {
                    var ddl = $("#MatNameId");
                    // ddl.removeAttrs('disabled style');
                    ddl.addClass('js-source-states');
                    var string = '<option value="">ALL</option>';
                    $.each(data, function (i, S) {
                        string += '<option value="' + S.Id + '">' + S.Name + '</option>'
                    });
                    ddl.html(string);
                    ddl.select2('val', '');
                });
            }
        });

        //#endregion

        /* Formatting function for row details - modify as you need */
        function format(d) {
            $.ajax({
                type: 'post',
                url: '@(Url.RouteUrl("ReportOperations/DetailData"))',
                data: { DN: d },
                success: function (data) {
                    $('#displayView').html(data);
                }
            });
            // `d` is the original data object for the row
            return '<table cellpadding="5" cellspacing="0" border="0" style="padding-left:50px;">' +
                '<tr>' +
                    '<td>Full name:</td>' +
                    '<td>' + data.DeliveryNo + '</td>' +
                '</tr>' +
                '<tr>' +
                    '<td>Extension number:</td>' +
                    '<td>' + data.ShipmentNo + '</td>' +
                '</tr>' +
                '<tr>' +
                    '<td>Extra info:</td>' +
                    '<td>And any further details here (images etc)...</td>' +
                '</tr>' +
            '</table>';
        }
        //#endregion

        //#region 4 btnSearch button click
        $("#btnSearch").click(function () {
            var sdate = $('#FromDateSearch').val();
            var edate = $('#ToDateSearch').val();
            var day_start = new Date(sdate);
            var day_end = new Date(edate);
            var total_days = ((day_end - day_start) / (1000 * 60 * 60 * 24)) + 1;

            if ($('#Departmentid').val() == "") {
                swal({
                    title: "Warning!",
                    text: "Sorry!, Department is not selected ",
                    type: "warning"
                });
            } else if ($('#SectionId').val() == "") {
                swal({
                    title: "Warning!",
                    text: "Sorry!, Section is not selected ",
                    type: "warning"
                });
            } else if (sdate == "" && edate == "") {
                swal({
                    title: "Warning!",
                    text: "Sorry!, You must choose date in the calendar",
                    type: "warning"
                });
            }
            else if (total_days > 32) {
                swal({
                    title: "Warning!",
                    text: "Sorry!, you can not use duration more than 31 days",
                    type: "warning"
                });
            }
            else {
                var label = [];
                var plan = [];
                var actualTender = [];
                var adjustTender = [];
                var actualAccept = [];
                var adjustAccept = [];
                var actualInbound = [];
                var adjustInbound = [];
                var actualOutbound = [];
                var adjustOutbound = [];
                var actualOntime = [];
                var adjustOntime = [];
                var actualDocrtn = [];
                var adjustDocrtn = [];
                var shipmentTender = [];
                var shipmentAccept = [];
                var shipmentInbound = [];
                var shipmentOutbound = [];
                var shipmentOntime = [];
                var shipmentDocrtn = [];
                var planshipment = [];
                var departmentId = $('#DepartmentId').val();
                var sectionId = $('#SectionId').val();
                var matNameId = $('#MatNameId').val();

                //$.ajax({
                //    async : true,
                //    type: "POST",
                //    data: $('form').serialize(),
                //    url: "/ReportOperations/jsonData/",
                //    dataType : "json",

                //    success : function(json) {

                var jsonString = $.post('@(Url.RouteUrl("ReportOperations"))',
                {
                    DepartmentId: departmentId,
                    SectionId: sectionId,
                    MatNameId: matNameId,
                    FromDateSearch: sdate,
                    ToDateSearch: edate
                }, function (data) {

                    // console.info(data);
                    $.each(data, function (index, item) {

                        var date = item.ActualGiDate;
                        label.push(date);
                        plan.push(item.Plan);
                        actualTender.push(item.OnTimeTender);
                        adjustTender.push(item.AdjustTender);
                        actualAccept.push(item.OnTimeAccept);
                        adjustAccept.push(item.AdjustAccept);
                        actualInbound.push(item.OnTimeInbound);
                        adjustInbound.push(item.AdjustInbound);
                        actualOutbound.push(item.OnTimeOutbound);
                        adjustOutbound.push(item.AdjustOutbound);
                        actualOntime.push(item.OnTimeOntime);
                        adjustOntime.push(item.AdjustOntime);
                        actualDocrtn.push(item.OnTimeDocReturn);
                        adjustDocrtn.push(item.AdjustDocReturn);
                        shipmentTender.push(item.SumOfTender);
                        shipmentAccept.push(item.SumOfAccept);
                        shipmentInbound.push(item.SumOfInbound);
                        shipmentOutbound.push(item.SumOfOutbound);
                        shipmentOntime.push(item.SumOfOntime);
                        shipmentDocrtn.push(item.SumOfDocReturn);
                        planshipment.push(item.SumOfDelivery);
                    });
                    //console.info(data);

                    /**
                     * Ontime
                     */
                    var barData = {
                        labels: label, //["January", "February", "March", "April", "May"],
                        datasets: [{
                            label: "Plan", yAxisID: 'A',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "line",
                            fill: false,
                            borderColor: '#EC932F',
                            backgroundColor: '#EC932F',
                            pointBorderColor: '#EC932F',
                            pointBackgroundColor: '#EC932F',
                            pointHoverBackgroundColor: '#EC932F',
                            pointHoverBorderColor: '#EC932F',
                            data: plan
                        }, {
                            label: "Transaction", yAxisID: 'B',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "line",
                            fill: false,
                            borderColor: '#23FE76',
                            backgroundColor: '#23FE76',
                            pointBorderColor: '#23FE76',
                            pointBackgroundColor: '#23FE76',
                            pointHoverBackgroundColor: '#23FE76',
                            pointHoverBorderColor: '#23FE76',
                            data: shipmentOntime
                        }, {
                            label: "Actual", yAxisID: 'A',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "bar",
                            fill: false,
                            backgroundColor: '#71B37C',
                            borderColor: '#71B37C',
                            hoverBackgroundColor: '#71B37C',
                            hoverBorderColor: '#71B37C',
                            data: actualOntime
                        }, {
                            label: "Adjust", yAxisID: 'A',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "bar",
                            fill: false,
                            backgroundColor: '#BEB37C',
                            borderColor: '#BEB37C',
                            hoverBackgroundColor: '#BEB37C',
                            hoverBorderColor: '#BEB37C',
                            data: adjustOntime
                        }]
                    };

                    //Then just before initializing the chart i destroyed
                    if (chartOntime != undefined || chartOntime != null) {
                        chartOntime.destroy();
                    }

                    var ctx = document.getElementById("barReportOperations").getContext("2d");
                    //var myNewChart = new Chart(ctx).Bar(barData, barOptions);
                    //chartOntime = new Chart(ctx).Bar(barData, barOptions);
                    chartOntime = new Chart(ctx, {
                        type: 'bar',
                        data: barData,
                        options: {
                            scales: {
                                yAxes: [{
                                    id: 'A',
                                    position: 'left',
                                    ticks: {
                                        beginAtZero: true,
                                        max: 100,
                                        min: 0,
                                        stepSize: 20
                                    }
                                }, {
                                    id: 'B',
                                    type: 'linear',
                                    position: 'right',
                                }]
                            }
                        }
                    });
                    //document.getElementById('js-legend').innerHTML = chartOntime.generateLegend();

                    //#endregion

                    //#region 2 bar chart ontime inbound adjust
                    /**
                     * Data for Bar chart
                     */
                    var barData = {
                        labels: label,
                        datasets: [{
                            label: "Plan", yAxisID: 'A',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "line",
                            fill: false,
                            borderColor: '#EC932F',
                            backgroundColor: '#EC932F',
                            pointBorderColor: '#EC932F',
                            pointBackgroundColor: '#EC932F',
                            pointHoverBackgroundColor: '#EC932F',
                            pointHoverBorderColor: '#EC932F',
                            data: plan
                        }, {
                            label: "Transaction", yAxisID: 'B',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "line",
                            fill: false,
                            borderColor: '#23FE76',
                            backgroundColor: '#23FE76',
                            pointBorderColor: '#23FE76',
                            pointBackgroundColor: '#23FE76',
                            pointHoverBackgroundColor: '#23FE76',
                            pointHoverBorderColor: '#23FE76',
                            data: shipmentDocrtn
                        }, {
                            label: "Actual", yAxisID: 'A',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "bar",
                            fill: false,
                            backgroundColor: '#71B37C',
                            borderColor: '#71B37C',
                            hoverBackgroundColor: '#71B37C',
                            hoverBorderColor: '#71B37C',
                            data: actualDocrtn
                        }, {
                            label: "Adjust", yAxisID: 'A',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "bar",
                            fill: false,
                            backgroundColor: '#BEB37C',
                            borderColor: '#BEB37C',
                            hoverBackgroundColor: '#BEB37C',
                            hoverBorderColor: '#BEB37C',
                            data: adjustDocrtn
                        }]
                    };

                    //Then just before initializing the chart i destroyed
                    if (chartOntimeDocrtn != undefined || chartOntimeDocrtn != null) {
                        chartOntimeDocrtn.destroy();
                    }

                    var ctx = document.getElementById("barReportOperationsDocRtn").getContext("2d");
                    //var myNewChart = new Chart(ctx).Bar(barData, barOptions);
                    chartOntimeDocrtn = new Chart(ctx, {
                        type: 'bar',
                        data: barData,
                        options: {
                            scales: {
                                yAxes: [{
                                    id: 'A',
                                    position: 'left',
                                    ticks: {
                                        beginAtZero: true,
                                        max: 100,
                                        min: 0,
                                        stepSize: 20
                                    }
                                }, {
                                    id: 'B',
                                    type: 'linear',
                                    position: 'right',
                                }]
                            }
                        }
                    });

                    //#region 3 bar chart ontime inbound adjust
                    /**
                     * Data for Bar chart
                     */
                    var barData = {
                        labels: label,
                        datasets: [{
                            label: "Plan", yAxisID: 'A',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "line",
                            fill: false,
                            borderColor: '#EC932F',
                            backgroundColor: '#EC932F',
                            pointBorderColor: '#EC932F',
                            pointBackgroundColor: '#EC932F',
                            pointHoverBackgroundColor: '#EC932F',
                            pointHoverBorderColor: '#EC932F',
                            data: plan
                        }, {
                            label: "Transaction", yAxisID: 'B',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "line",
                            fill: false,
                            borderColor: '#23FE76',
                            backgroundColor: '#23FE76',
                            pointBorderColor: '#23FE76',
                            pointBackgroundColor: '#23FE76',
                            pointHoverBackgroundColor: '#23FE76',
                            pointHoverBorderColor: '#23FE76',
                            data: shipmentInbound
                        }, {
                            label: "Actual", yAxisID: 'A',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "bar",
                            fill: false,
                            backgroundColor: '#71B37C',
                            borderColor: '#71B37C',
                            hoverBackgroundColor: '#71B37C',
                            hoverBorderColor: '#71B37C',
                            data: actualInbound
                        }, {
                            label: "Adjust", yAxisID: 'A',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "bar",
                            fill: false,
                            backgroundColor: '#BEB37C',
                            borderColor: '#BEB37C',
                            hoverBackgroundColor: '#BEB37C',
                            hoverBorderColor: '#BEB37C',
                            data: adjustInbound
                        }]
                    };

                    //Then just before initializing the chart i destroyed
                    if (chartOntimeInbound != undefined || chartOntimeInbound != null) {
                        chartOntimeInbound.destroy();
                    }

                    var ctx = document.getElementById("barReportOperationsInbound").getContext("2d");
                    //var myNewChart = new Chart(ctx).Bar(barData, barOptions);
                    chartOntimeInbound = new Chart(ctx, {
                        type: 'bar',
                        data: barData,
                        options: {
                            scales: {
                                yAxes: [{
                                    id: 'A',
                                    position: 'left',
                                    ticks: {
                                        beginAtZero: true,
                                        max: 100,
                                        min: 0,
                                        stepSize: 20
                                    }
                                }, {
                                    id: 'B',
                                    type: 'linear',
                                    position: 'right',
                                }]
                            }
                        }
                    });

                    //#region 4 bar chart ontime outbound adjust
                    /**
                     * Data for Bar chart
                     */
                    var barData = {
                        labels: label,
                        datasets: [{
                            label: "Plan", yAxisID: 'A',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "line",
                            fill: false,
                            borderColor: '#EC932F',
                            backgroundColor: '#EC932F',
                            pointBorderColor: '#EC932F',
                            pointBackgroundColor: '#EC932F',
                            pointHoverBackgroundColor: '#EC932F',
                            pointHoverBorderColor: '#EC932F',
                            data: plan
                        }, {
                            label: "Transaction", yAxisID: 'B',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "line",
                            fill: false,
                            borderColor: '#23FE76',
                            backgroundColor: '#23FE76',
                            pointBorderColor: '#23FE76',
                            pointBackgroundColor: '#23FE76',
                            pointHoverBackgroundColor: '#23FE76',
                            pointHoverBorderColor: '#23FE76',
                            data: shipmentOutbound
                        }, {
                            label: "Actual", yAxisID: 'A',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "bar",
                            fill: false,
                            backgroundColor: '#71B37C',
                            borderColor: '#71B37C',
                            hoverBackgroundColor: '#71B37C',
                            hoverBorderColor: '#71B37C',
                            data: actualOutbound
                        }, {
                            label: "Adjust", yAxisID: 'A',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "bar",
                            fill: false,
                            backgroundColor: '#BEB37C',
                            borderColor: '#BEB37C',
                            hoverBackgroundColor: '#BEB37C',
                            hoverBorderColor: '#BEB37C',
                            data: adjustOutbound
                        }]
                    };

                    //Then just before initializing the chart i destroyed
                    if (chartOntimeOutbound != undefined || chartOntimeOutbound != null) {
                        chartOntimeOutbound.destroy();
                    }

                    var ctx = document.getElementById("barReportOperationsOutbound").getContext("2d");
                    //var myNewChart = new Chart(ctx).Bar(barData, barOptions);
                    chartOntimeOutbound = new Chart(ctx, {
                        type: 'bar',
                        data: barData,
                        options: {
                            scales: {
                                yAxes: [{
                                    id: 'A',
                                    position: 'left',
                                    ticks: {
                                        beginAtZero: true,
                                        max: 100,
                                        min: 0,
                                        stepSize: 20
                                    }
                                }, {
                                    id: 'B',
                                    type: 'linear',
                                    position: 'right',
                                }]
                            }
                        }
                    });

                    //#region 5 bar chart ontime Accept adjust
                    /**
                     * Data for Bar chart
                     */
                    var barData = {
                        labels: label,
                        datasets: [{
                            label: "Plan", yAxisID: 'A',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "line",
                            fill: false,
                            borderColor: '#EC932F',
                            backgroundColor: '#EC932F',
                            pointBorderColor: '#EC932F',
                            pointBackgroundColor: '#EC932F',
                            pointHoverBackgroundColor: '#EC932F',
                            pointHoverBorderColor: '#EC932F',
                            data: plan
                        }, {
                            label: "Transaction", yAxisID: 'B',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "line",
                            fill: false,
                            borderColor: '#23FE76',
                            backgroundColor: '#23FE76',
                            pointBorderColor: '#23FE76',
                            pointBackgroundColor: '#23FE76',
                            pointHoverBackgroundColor: '#23FE76',
                            pointHoverBorderColor: '#23FE76',
                            data: shipmentAccept
                        }, {
                            label: "Actual", yAxisID: 'A',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "bar",
                            fill: false,
                            backgroundColor: '#71B37C',
                            borderColor: '#71B37C',
                            hoverBackgroundColor: '#71B37C',
                            hoverBorderColor: '#71B37C',
                            data: actualAccept
                        }, {
                            label: "Adjust", yAxisID: 'A',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "bar",
                            fill: false,
                            backgroundColor: '#BEB37C',
                            borderColor: '#BEB37C',
                            hoverBackgroundColor: '#BEB37C',
                            hoverBorderColor: '#BEB37C',
                            data: adjustAccept
                        }]
                    };

                    //Then just before initializing the chart i destroyed
                    if (chartOntimeAccept != undefined || chartOntimeAccept != null) {
                        chartOntimeAccept.destroy();
                    }

                    var ctx = document.getElementById("barReportOperationsAccept").getContext("2d");
                    //var myNewChart = new Chart(ctx).Bar(barData, barOptions);
                    chartOntimeAccept = new Chart(ctx, {
                        type: 'bar',
                        data: barData,
                        options: {
                            scales: {
                                yAxes: [{
                                    id: 'A',
                                    position: 'left',
                                    ticks: {
                                        beginAtZero: true,
                                        max: 100,
                                        min: 0,
                                        stepSize: 20
                                    }
                                }, {
                                    id: 'B',
                                    type: 'linear',
                                    position: 'right',
                                }]
                            }
                        }
                    });

                    //#region 6 bar chart ontime Tender adjust
                    /**
                     * Data for Bar chart
                     */
                    var barData = {
                        labels: label,
                        datasets: [{
                            label: "Plan", yAxisID: 'A',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "line",
                            fill: false,
                            borderColor: '#EC932F',
                            backgroundColor: '#EC932F',
                            pointBorderColor: '#EC932F',
                            pointBackgroundColor: '#EC932F',
                            pointHoverBackgroundColor: '#EC932F',
                            pointHoverBorderColor: '#EC932F',
                            data: plan
                        }, {
                            label: "Transaction", yAxisID: 'B',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "line",
                            fill: false,
                            borderColor: '#23FE76',
                            backgroundColor: '#23FE76',
                            pointBorderColor: '#23FE76',
                            pointBackgroundColor: '#23FE76',
                            pointHoverBackgroundColor: '#23FE76',
                            pointHoverBorderColor: '#23FE76',
                            data: shipmentTender
                        }, {
                            label: "Actual", yAxisID: 'A',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "bar",
                            fill: false,
                            backgroundColor: '#71B37C',
                            borderColor: '#71B37C',
                            hoverBackgroundColor: '#71B37C',
                            hoverBorderColor: '#71B37C',
                            data: actualTender
                        }, {
                            label: "Adjust", yAxisID: 'A',
                            //new option, type will default to bar as that what is used to create the scale
                            type: "bar",
                            fill: false,
                            backgroundColor: '#BEB37C',
                            borderColor: '#BEB37C',
                            hoverBackgroundColor: '#BEB37C',
                            hoverBorderColor: '#BEB37C',
                            data: adjustTender
                        }]
                    };

                    //Then just before initializing the chart i destroyed
                    if (chartOntimeTender != undefined || chartOntimeTender != null) {
                        chartOntimeTender.destroy();
                    }

                    var ctx = document.getElementById("barReportOperationsTender").getContext("2d");
                    //var myNewChart = new Chart(ctx).Bar(barData, barOptions);
                    chartOntimeTender = new Chart(ctx, {
                        type: 'bar',
                        data: barData,
                        options: {
                            scales: {
                                yAxes: [{
                                    id: 'A',
                                    position: 'left',
                                    ticks: {
                                        beginAtZero: true,
                                        max: 100,
                                        min: 0,
                                        stepSize: 20
                                    }
                                }, {
                                    id: 'B',
                                    type: 'linear',
                                    position: 'right',
                                }]
                            }
                        }
                    });

                }); //end postJson

                //#region table
                // on-time accept daliy dataTable
                //alert(jsonString);
                var ReportOperations = $('#ReportOperationsSummary').dataTable();
                ReportOperations.fnDestroy();
                ReportOperations.dataTable({
                    dom: "<'row'<'col-sm-4'l><'col-sm-4 text-center'B><'col-sm-4'f>>tp",
                    "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]],
                    "ajax": {
                        "type": "POST",
                        "url": '@(Url.RouteUrl("ReportOperations"))',
                        "data": function (d) {
                            d.DepartmentId = departmentId;
                            d.SectionId = sectionId;
                            d.MatNameId = matNameId;
                            d.FromDateSearch = sdate;
                            d.ToDateSearch = edate;
                        },
                        "dataSrc": ""
                    },
                    columns: [
                        {
                            "className": 'details-control',
                            "orderable": false,
                            "data": null,
                            "defaultContent": ''
                        },
                   { data: "Department" },
                   { data: "Section" },
                   { data: "ActualGiDate" },
                   { data: "SumOfTender" },
                   { data: "OnTimeTender" },
                   { data: "AdjustTender" },
                   { data: "SumOfAccept" },
                   { data: "OnTimeAccept" },
                   { data: "AdjustAccept" },
                   { data: "SumOfInbound" },
                   { data: "OnTimeInbound" },
                   { data: "AdjustInbound" },
                   { data: "SumOfOutbound" },
                   { data: "OnTimeOutbound" },
                   { data: "AdjustOutbound" },
                   { data: "SumOfOntime" },
                   { data: "OnTimeOntime" },
                   { data: "AdjustOntime" },
                   { data: "SumOfDocReturn" },
                   { data: "OnTimeDocReturn" },
                   { data: "AdjustDocReturn" },

                    ],
                    select: true,
                    buttons: [
                        { extend: 'copy', className: 'btn-sm' },
                        { extend: 'csv', title: 'On-time Accept Daily', className: 'btn-sm' },
                        { extend: 'excel', title: 'On-time Accept Daily', className: 'btn-sm' },
                    ]
                });
                //#enregion tagle
            } //end if else

        }); //end btnSerarch click

        //#endregion
        //#region Toggle column visibility
        //$('a.toggle-vis').on('click', function (e) {
        //    e.preventDefault();

        //    // Get the column API object
        //    var column = ReportOperations.column($(this).attr('data-column'));

        //    // Toggle the visibility
        //    column.visible(!column.visible());
        //});
        //#endregion
        //#region Bind normal buttons

        $('.ladda-button').ladda('bind', { timeout: 2000 });

        // Bind progress buttons and simulate loading progress
        Ladda.bind('.progress-demo .ladda-button', {
            callback: function (instance) {
                var progress = 0;
                var interval = setInterval(function () {
                    progress = Math.min(progress + Math.random() * 0.1, 1);
                    instance.setProgress(progress);

                    if (progress === 1) {
                        instance.stop();
                        clearInterval(interval);
                    }
                }, 200);
            }
        });

        var l = $('.ladda-button-demo').ladda();
        l.click(function () {
            // Start loading
            l.ladda('start');

            // Timeout example
            // Do something in backend and then stop ladda
            setTimeout(function () {
                l.ladda('stop');
            }, 5000)
        });
        //#endregion

        

    </script>
}


